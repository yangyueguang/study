######### 监听代理转发的location必须以/结尾表达路径 ##########
######### 修改本机域名与IP的映射在/etc/hosts 比如在里面加一句192.168.200.200 www.abc.com 本机访问abc.com就会跳转对应的ip
# nginx -V
# nginx -s reload      # 重新载入配置文件
# nginx -s reopen      # 重启 Nginx
# nginx -s stop        # 停止 Nginx
# service nginx start
# service nginx stop
# service nginx reload
# systemctl start nginx
# systemctl enable nginx
########### 每个指令必须有分号结束 #################

user administrator administrators;  #配置用户或者组，默认为nobody nobody。
worker_processes  1;  #允许生成的进程数，默认为1
#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址
#error_log  logs/error.log  warn;#制定日志路径，级别：debug|info|notice|warn|error|crit|alert|emerg
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log log/error.log debug;

events {
    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off
    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    worker_connections  1024;    #最大连接数，默认为512
}

http {
    include       mime.types;   #文件扩展名与文件类型映射表
    default_type  application/octet-stream; #默认文件类型，默认为text/plain
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for" "$http_host"'
    #                  '$request_time $upstream_response_time $pipe - $upstream_addr';
    log_format  post_format $request_body;
    #access_log  logs/access.log  main;
    #access_log off; #取消服务日志
    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    keepalive_timeout 120;  #连接超时时间，默认为75s，可以在http，server，location块。
    error_page 404 https://www.baidu.com; #错误页
    #gzip           on;
    #tcp_nopush     on;
    proxy_connect_timeout 600;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;
    proxy_intercept_errors on;
    server {
        keepalive_requests 120;  #单连接请求上限次数。
        listen       80;  #监听端口 somename:8080;
        server_name  localhost;  #监听地址
        # rewrite ^(.*)$ https://$host$1 permanent; #这句是代表 把http的域名请求转成https
        # charset gb2312;
        location / {  #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写
            root   html;
            index  index.html index.htm;#设置默认页
            # root path;  #根目录
            # proxy_pass  http://localhost:8000;  #请求转向mysvr 定义的服务器列表
            # deny 127.0.0.1;  #拒绝的ip
            # allow 172.18.5.54; #允许的ip
        }
        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
  
    server {
        listen       8001;
        server_name  www.a.com;
        location /fileServer {
            alias F:\test;
            autoindex on;  # 显示目录
            autoindex_exact_size on;  # 显示文件大小
            autoindex_localtime on;  # 显示文件时间
            allow all;
            index  index.html index.htm;
        }
    }
    server {
        listen       443 ssl http2;
        server_name  api.superfree.com.cn;
        ssl_certificate cert/api.superfree.com.cn.pem;
        ssl_certificate_key cert/api.superfree.com.cn.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        location /api/ {
            include /etc/nginx/uwsgi_params;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $remote_addr; #$proxy_add_x_forwarded_for;
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Credentials "true";  
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS";  
            add_header Access-Control-Allow-Headers *;  
            proxy_pass http://localhost:8085;
        }
        location /ws {
            proxy_pass http://localhost:8085;
            include /etc/nginx/uwsgi_params;
            proxy_http_version 1.1;
            client_max_body_size 1000m;
            proxy_set_header X-Nginx-Proxy true;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";        
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS";
            add_header Access-Control-Allow-Headers *;
            add_header Access-Control-Allow-Headers Authorization;
            proxy_read_timeout  36000s;
            proxy_send_timeout  36000s; 
            proxy_connect_timeout 3600s;
            proxy_redirect     off;    
        }
        location /static {
            alias /root/super/static/;
        }
    }
}



